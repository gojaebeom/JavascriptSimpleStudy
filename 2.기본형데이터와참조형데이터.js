/**
 * 🎈불변값
 * 변수와 상수를 구분하는 성질은 '변경 가능성' 입니다. 
 * 바꿀 수 있으면 변수, 없으면 상수입니다.
 * 상수와 불변값은 햇갈리기 쉬운데 다른 개념입니다.
 * 
 * -변수와 상수를 구분 짓는 변경 가능성의 대상은 변수 영역 메모리입니다.
 * -불변성 여부를 구분할 때의 변경 가능성의 대상은 데이터 영역 메모리입니다.
 * 다음 예제를 살펴봅시다.
 */
var a = 'abc';
a = a + 'def';

console.log(a);

var b = 5; 
var c = 5; 

console.log(b, c);

/**
 * 변수 a에 문자열 'abc'를 할당하고 거기에 다시 문자열 'def'를 붙여 다시 a에 할당했습니다. 
 * 그럼 변수 a의 값은 abcdef가 됩니다. 하지만 기존의 abc가 abcdef로 변경 되는 것이 아닙니다. 
 * 데이터영역에 abcdef라는 값이 있는지 판별하고 없으면 새로 만들어 그 주소를 a에게 할당하는 것입니다.
 * 기존의 abc 문자열을 가지고 있는 데이터영역의 한 공간은 그대로 남아있습니다.
 * 사용되지 않는 데이터들은 런타임환경에서 가비지컬렉터에 의해 메모리에서 제거됩니다. 
 */

 /**
  * 🎈가변값
  * 참조형 데이터의 기본적인 성질은 가변값입니다. 하지만 설정에 따라 불변값으로 활용하는 방안도 있습니다.
  */

  var obj1 = {
      a : 1,
      b : 'bbb'
  };
console.log('%c 변수 영역','color:red');
console.table({
    '주소 1001':{'이름':'','값':''},
    '주소 1002':{'이름':'a','값':'@2001'},
    '주소 1003':{'이름':'','값':''},
    '주소 1004':{'이름':'','값':''},
    '주소 1005':{'이름':'','값':''},
});
console.log('%c 데이터 영역','color:blue');
console.table({
    '주소 2001':{'데이터':'@5014~?'},
    '주소 2002':{'데이터':''},
    '주소 2003':{'데이터':1},
    '주소 2004':{'데이터':'bbb'},
    '주소 2005':{'데이터':''},
});
console.log('%c 객체 obj1의 변수 영역','color:green');
console.table({
    '주소 5101':{'이름':'','값':''},
    '주소 5102':{'이름':'','값':''},
    '주소 5103':{'이름':'','값':''},
    '주소 5104':{'이름':'a','값':'@2003'},
    '주소 5105':{'이름':'b','값':'@2004'},
});

/**
 * 객체 obj1을 선언하고 a,b 라는 프로퍼티들을 만들었습니다. 이에 따른 자바스크립트 엔진의 대략적인 과정을 보겠습니다.
 * 1. 컴퓨터는 우선 변수 영역의 빈공간 @1002을 확보하고 그 주소의 이름을 obj1로 지정합니다.
 * 2. 임의의 데이터 저장공간 @2001에 데이터를 저장하려고 보니 여러 개의 프로퍼티로 이뤄진 데이터 그룹입니다. 이 그룹 내부의 프로퍼티들을 저장하기 위해
 * obj1만의 별도의 변수영역을 마련하고, 그 영역의 주소 @5014~? 를 @2001의 값으로 저장합니다.
 * 3. 데이터 영역에서 숫자 1을 검색합니다. 검색 결과가 없으므로 임의로 @2003 주소에 1이라는 값을 저장하고 이 주소를 @5104 의 값으로 할당합니다.
 * 4. 문자열 bbb역시 임의로 @2004 주소에 값으로 저장하고 @5105 주소의 값으로 저장합니다.
 */


/**
* 참조형은 이와 같이 객체의 변수 영역이 별도로 존재한다는 점 입니다. 데이터영역의 값은 여전히 불변값이지만,
* 변수영역에 있는 참조값은 항상 바뀔 수 있습니다. 바로 이 부분 때문에 흔히 참조형 데이터는 불변하지 않다고 표현합니다.
* 다음 예제를 보겠습니다.
*/
obj1.a = 2;
console.log(obj1);

console.log('%c 변수 영역','color:red');
console.table({
    '주소 1001':{'이름':'','값':''},
    '주소 1002':{'이름':'a','값':'@2001'},
    '주소 1003':{'이름':'','값':''},
    '주소 1004':{'이름':'','값':''},
    '주소 1005':{'이름':'','값':''},
});
console.log('%c 데이터 영역','color:blue');
console.table({
    '주소 2001':{'데이터':'@5014~?'},
    '주소 2002':{'데이터':''},
    '주소 2003':{'데이터':1},
    '주소 2004':{'데이터':'bbb'},
    '주소 2005':{'데이터':2},
});
console.log('%c 객체 obj1의 변수 영역','color:green');
console.table({
    '주소 5101':{'이름':'','값':''},
    '주소 5102':{'이름':'','값':''},
    '주소 5103':{'이름':'','값':''},
    '주소 5104':{'이름':'a','값':'@2005'},
    '주소 5105':{'이름':'b','값':'@2004'},
});

/**
 * 만들어 두었던 객체 obj1의 프로퍼티 a에 number type의 2라는 값을 할당합니다.
 * - 데이터 영역에서 숫자 2를 검색합니다. 검색 결과가 없으므로 빈 공간 @2005에 값을 저장하고 이 주소를 @5104 주소의 값으로 저장합니다.
 * 
 * 이제 기본형과 참조형의 변수 복사 비교를 해보겠습니다.
 */

 var a = 10;
 var b = a;

 var obj2 = { c : 10, d : 'ddd'};
 var obj3 = obj2;

 console.log(a, b);
 console.log(obj2, obj3);


 b = 5;
 obj3.c = 15;


 console.log(a, b);
 console.log(obj2, obj3);

 console.log(a === b);
 console.log(obj2 === obj3);
 /**
  * 기본형 데이터를 복사한 변수 b의 값을 바꿨더니 값이 달라진 반면, 참조형 데이터를 복사한 변수 obj3의 프로퍼티의 값을 바꾸었더니 기존의 obj2의 값도 동일하게 
  * 바뀌어 있습니다. 이것은 obj2와 obj3이 같은 객체를 가리키고 있기때문입니다.
  * 
  * 이 결과가 기본형과 참조형 데이터의 가장 큰 차이점입니다.
  */


